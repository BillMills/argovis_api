openapi: 3.0.3
info:
  title: Argovis API
  description: REST API for Argo profiles, platforms, selections, BGC data, gridded products, etc.
  contact:
    name: Argovis Collaboration
    email: tbd@example.com
    url: https://argovis.colorado.edu/
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: '0.1'
externalDocs:
  description: Find us on GitHub
  url: https://github.com/argovis/argovis_api
servers:
- url: 'https://argovis.colorado.edu'
  description: Server Hosted by University of Colorado, Boulder
- url: 'http://localhost:3001'
  description: Local server for testing and development
security:
- name: []
tags: 
  - name: 'ar'
    description: 'atmospheric river shapes'
  - name: 'covar'
    description: 'Argo float position forcast product'
  - name: 'tc'
    description: 'tropical cyclone data'
paths:
  /arShapes/findByDate:
    get:
      tags:
      - ar
      summary: shapes representing atmospheric rivers at a given date-time
      operationId: findARbyDate
      parameters:
      - $ref: '#/components/parameters/arDate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arShapeSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /arShapes/findByID:
    get:
      tags:
      - ar
      summary: shapes representing atmospheric rivers with a given ID
      operationId: findARbyID
      parameters:
        - $ref: '#/components/parameters/arID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arShapeSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /arShapes:
    get:
      tags:
      - ar
      summary: one instance of a shape representing an atmospheric river
      operationId: findOneAR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arShapeSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /covarGrid/{lat}/{lon}/{forcastDays}:
    get:
      tags:
      - covar
      summary: Probability distribution field for a float at point lat-lon after forcastDays.
      operationId: findCovar
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/lon'
        - $ref: '#/components/parameters/forcastDays'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CovarSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /tc:
    get:
      tags:
      - tc
      summary: one tropical cyclone instance
      operationId: findOneTC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /tc/findByDate:
    get:
      tags:
      - tc
      summary: tropical cyclones at a given date-time
      operationId: findTCbyDate
      parameters:
      - $ref: '#/components/parameters/date'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
  /tc/findByDateRange:
    get:
      tags:
      - tc
      summary: tropical cyclones intersecting a time period
      operationId: findTCbyDateRange
      parameters:
      - $ref: '#/components/parameters/startDate'
      - $ref: '#/components/parameters/endDate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcSchema'
        '400':
          $ref: '#/components/responses/badRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/serverError'
components:
  schemas:
    arShapeSchema:
      type: object
      required:
      - _id
      - date
      - shapeID
      - geoLocation
      - date_formatted
      properties:
        _id:
          type: string
        date:
          type: string
          format: date-time
        shapeId:
          type: integer
        geoLocation:
          $ref: '#/components/schemas/geoLocation'
        date_formateed:
          type: string
          format: date
    CovarSchema:
      type: object
      required:
      - _id
      - features
      - dLat
      - forcastDays
      - dLon
      - geoLocation
      properties:
        features:
          type: array
          items:
            type: object
            properties:
              geometry:
                type: object
                properties:
                  type: 
                    type: string
                  coordinates: 
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                        minItems: 2
                        maxItems: 2
              type: 
                type: string    
        _id:
          type: string
        dLat:
          type: number
        dLon:
          type: number
        forcastDays:
          type: integer
        geoLocation: 
          $ref: '#/components/schemas/geoLocation'
    tcSchema:
      type: object
      required:
      - _id
      - num
      - source
      - startDate
      - endDate
      properties:
        _id:
          type: string
        name:
          type: string
        num:
          type: number
        source:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        trajData:
          type: array
          items:
            type: object
            required:
            - date
            - time
            - class
            - lat
            - lon
            - timestamp
            - geoLocation
            properties:
              date: 
                type: string
              time:  
                type: number
              class:  
                type: string
              lat:  
                type: number
              lon:  
                type: number
              wind:  
                type: number
              pres: 
                type: number
              season: 
                type: number
              timestamp: 
                type: string
                format: date-time
              geoLocation:
                $ref: '#/components/schemas/geoLocation'
    geoLocation:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            items:
              type: number
              minItems: 2
              maxItems: 2
            uniqueItems: true
    errorResponse:
      type: object
      required:
      - code
      - message
      properties:
        code:
          type: integer
        message:
          type: string
  parameters:
    arDate:
      in: query
      name: date
      required: true
      description: three hour increments starting at 2004-01-01T00:00:00 and ending at 2017-04-02T03:00:00
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: '2010-01-01T00:00:00Z'
    arID:
      in: query
      name: _id
      required: true
      description: ID of an atmospheric river object
      schema: 
        type: string
        example: '1_262992'
    date:
      in: query
      name: date
      required: true
      description: date-time formatted string
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: '2010-01-01T00:00:00Z'
    startDate:
      in: query
      name: startDate
      required: true
      description: date-time formatted string indicating the beginning of a time period
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: '2010-01-01T00:00:00Z'
    endDate:
      in: query
      name: endDate
      required: true
      description: date-time formatted string indicating the end of a time period
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: '2010-01-01T00:00:00Z'
    lat:
      in: path
      name: lat
      required: true
      description: latitude (degrees) of Argo float location
      schema: 
        type: number
        minimum: -90
        maximum: 90
        example: 5.25
    lon:
      in: path
      name: lon
      required: true
      description: longitude (degrees) of Argo float location
      schema: 
        type: number
        minimum: -180
        maximum: 180
        example: -20.33
    forcastDays:
      in: path
      name: forcastDays
      required: true
      description: number of days over which to project Argo float drift
      schema: 
        type: number
        minimum: 60
        maximum: 1800
        example: 60
        enum: [60, 120, 140, 240, 360, 480, 720, 840, 960, 1080, 1200, 1320, 1440, 1560, 1680, 1800]

  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    notFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    serverError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'

