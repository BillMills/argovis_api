{
   "openapi": "3.0.3",
   "info": {
      "title": "Argovis API",
      "description": "REST API for Argo profiles, platforms, selections, BGC data, gridded products, etc.",
      "contact": {
         "name": "Argovis Collaboration",
         "email": "argovis@colorado.edu",
         "url": "https://argovis.colorado.edu"
      },
      "license": {
         "name": "MIT",
         "url": "https://opensource.org/licenses/MIT"
      },
      "version": "2.0"
   },
   "externalDocs": {
      "description": "Find us on GitHub",
      "url": "https://github.com/argovis/argovis_api"
   },
   "servers": [
      {
         "url": "https://argovis-api.colorado.edu"
      },
      {
         "url": "/"
      }
   ],
   "security": [
      {
         "name": []
      }
   ],
   "tags": [
      {
         "name": "argo",
         "description": "Argo profile data, including core, BGC and deep floats"
      },
      {
         "name": "cchdo",
         "description": "CCHDO profile data."
      },
      {
         "name": "grid",
         "description": "Gridded products derived from Argo floats, simulation, or satalite product"
      },
      {
         "name": "tc",
         "description": "tropical cyclone data"
      },
      {
         "name": "ar (experimental)",
         "description": "atmospheric river shapes"
      },
      {
         "name": "argone",
         "description": "Argo float position forcast product"
      },
      {
         "name": "summary (experimental)",
         "description": "Summary statistics (mostly for internal use)"
      },
      {
         "name": "Argo trajectories (experimental)",
         "description": "Trajectories of argo floats"
      },
      {
         "name": "token",
         "description": "token validation"
      },
      {
         "name": "ping",
         "description": "ping for liveness"
      }
   ],
   "paths": {
      "/ping": {
         "get": {
            "tags": [
               "ping"
            ],
            "summary": "Dummy endpoint for liveness checks",
            "operationId": "ping",
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/ar": {
         "get": {
            "tags": [
               "ar (experimental)"
            ],
            "summary": "Find and filter atmo river shapes.",
            "operationId": "findAR",   
            "parameters": [
               {
                  "$ref": "#/components/parameters/arDate"
               },
               {
                  "$ref": "#/components/parameters/arID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/arShapeSchema"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argone": {
         "get": {
            "tags": [
               "argone"
            ],
            "summary": "Probabilities of floats moving between two points in a range of forecast projections",
            "operationId": "findargone",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/forecastOrigin"
               },
               {
                  "$ref": "#/components/parameters/forecastGeolocation"
               },
               {
                  "$ref": "#/components/parameters/metadata"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Forecast durations to include. Return only documents that have all data requested. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string",
                        "pattern": "^((~)?((90)|(180)|(270)|(360)|(450)|(540)|(630)|(720)|(810)|(900)|(990)|(1080)|(1170)|(1260)|(1350)|(1440)|(1530)|(1620)|(1710)|(1800){1})|all|except-data-values)$"
                     },
                     "example": "90"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argone"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argone/meta": {
         "get": {
            "tags": [
               "argone"
            ],
            "summary": "argone metadata search and filter.",
            "operationId": "findargoneMeta",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argoneMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/tc": {
         "get": {
            "tags": [
               "tc"
            ],
            "summary": "Tropical cyclone search and filter.",
            "operationId": "findTC",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/startDate"
               },
               {
                  "$ref": "#/components/parameters/endDate"
               },
               {
                  "$ref": "#/components/parameters/polygon"
               },
               {
                  "$ref": "#/components/parameters/multipolygon"
               },
               {
                  "$ref": "#/components/parameters/winding"
               },
               {
                  "$ref": "#/components/parameters/center"
               },
               {
                  "$ref": "#/components/parameters/radius"
               },
               {
                  "$ref": "#/components/parameters/tcName"
               },
               {
                  "$ref": "#/components/parameters/metadata"
               },
               {
                  "$ref": "#/components/parameters/mostrecent"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Keys of data to include. Return only documents that have all data requested, within the pressure range if specified. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string",
                        "pattern": "^((~)?((wind)|(surface_pressure){1})|all|except-data-values)$"
                     },
                     "example": "wind,~surface_pressure"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/tc"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/tc/meta": {
         "get": {
            "tags": [
               "tc"
            ],
            "summary": "Tropical cyclone metadata search and filter.",
            "operationId": "findTCmeta",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/tcName"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/tcMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/tc/vocabulary": {
         "get": {
            "tags": [
               "tc"
            ],
            "summary": "List all possible values for certain tc query string parameters",
            "operationId": "tcVocab",
            "parameters": [
               {
                  "in": "query",
                  "name": "parameter",
                  "required": true,
                  "description": "TC query string parameter to summarize possible values of.",
                  "schema": {
                     "type": "string",
                     "enum": ["name", "data", "metadata"]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/grids/{gridName}": {
         "get": {
            "tags": [
               "grid"
            ],
            "summary": "Search and filter for grid named in path",
            "operationId": "findgrid",
            "parameters": [
               {
                  "name": "gridName",
                  "in": "path",
                  "required": "true",
                  "schema": {
                     "type": "string",
                     "enum": ["rg09", "kg21"]
                  }
               },
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/startDate"
               },
               {
                  "$ref": "#/components/parameters/endDate"
               },
               {
                  "$ref": "#/components/parameters/polygon"
               },
               {
                  "$ref": "#/components/parameters/multipolygon"
               },
               {
                  "$ref": "#/components/parameters/winding"
               },
               {
                  "$ref": "#/components/parameters/center"
               },
               {
                  "$ref": "#/components/parameters/radius"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "$ref": "#/components/parameters/mostrecent"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Keys of data to include. Return only documents that have all data requested, within the pressure range if specified. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     },
                     "example": "rg09_salinity"
                  }
               },
               {
                  "$ref": "#/components/parameters/presRange"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/grid"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/grids/meta": {
         "get": {
            "tags": [
               "grid"
            ],
            "summary": "Metadata for grids by ID",
            "operationId": "findgridMeta",
            "parameters":[
               {
                  "$ref": "#/components/parameters/genericID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/gridMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/grids/vocabulary": {
         "get": {
            "tags": [
               "grid"
            ],
            "summary": "List all grid names currently available",
            "operationId": "gridVocab",
            "parameters": [
               {
                  "in": "query",
                  "name": "parameter",
                  "required": true,
                  "description": "Grid path or query string parameter to summarize possible values of.",
                  "schema": {
                     "type": "string",
                     "enum": ["gridName"]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/cchdo": {
         "get": {
            "tags": [
               "cchdo"
            ],
            "summary": "CCHDO search and filter.",
            "operationId": "findCCHDO",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/startDate"
               },
               {
                  "$ref": "#/components/parameters/endDate"
               },
               {
                  "$ref": "#/components/parameters/polygon"
               },
               {
                  "$ref": "#/components/parameters/multipolygon"
               },
               {
                  "$ref": "#/components/parameters/winding"
               },
               {
                  "$ref": "#/components/parameters/center"
               },
               {
                  "$ref": "#/components/parameters/radius"
               },
               {
                  "$ref": "#/components/parameters/metadata"
               },
               {
                  "$ref": "#/components/parameters/woceline"
               },
               {
                  "$ref": "#/components/parameters/cchdo_cruise"
               },
               {
                  "$ref": "#/components/parameters/profileSource"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "$ref": "#/components/parameters/mostrecent"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Keys of data to include. Return only documents that have all data requested, within the pressure range if specified. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string",
                        "pattern": "^((~)?((ammonium_btl)|(ammonium_btl_woceqc)|(argon_btl)|(argon_btl_woceqc)|(argon_error_btl)|(bacterial_cell_count_btl)|(bacterial_cell_count_btl_woceqc)|(barium_btl)|(barium_btl_woceqc)|(barium_l_btl)|(barium_l_btl_woceqc)|(bionbr_btl)|(bnlid_btl)|(bottle_latitude_btl)|(bottle_longitude_btl)|(bottle_number_btl)|(bottle_number_btl_woceqc)|(bottle_salinity_btl)|(bottle_salinity_btl_woceqc)|(bottle_time_btl)|(calcium_btl)|(calcium_btl_woceqc)|(carbon_tetrachloride_btl)|(carbon_tetrachloride_btl_woceqc)|(carbon_tetrachloride_l_btl)|(carbon_tetrachloride_l_btl_woceqc)|(cdom_nasa_placeholder_btl)|(cdom_nasa_placeholder_btl_woceqc)|(cdom_ucsb_placeholder_btl)|(cdom_ucsb_placeholder_btl_woceqc)|(cesium_134_bq_btl)|(cesium_134_bq_btl_woceqc)|(cesium_137_bq_btl)|(cesium_137_bq_btl_woceqc)|(cesium_137_bq_error_btl)|(cfc_113_btl)|(cfc_113_btl_woceqc)|(cfc_113_l_btl)|(cfc_113_l_btl_woceqc)|(cfc_11_btl)|(cfc_11_btl_woceqc)|(cfc_11_error_btl)|(cfc_11_l_btl)|(cfc_11_l_btl_woceqc)|(cfc_12_btl)|(cfc_12_btl_woceqc)|(cfc_12_error_btl)|(cfc_12_l_btl)|(cfc_12_l_btl_woceqc)|(chlorophyll_a_btl)|(chlorophyll_a_btl_woceqc)|(chlorophyll_a_ug_kg_btl)|(chlorophyll_a_ug_kg_btl_woceqc)|(co2_mole_fraction_btl)|(co2_mole_fraction_btl_woceqc)|(ctd_beamcp_btl)|(ctd_beamcp_ctd)|(ctd_beamcp_ctd_woceqc)|(ctd_beta700_raw_btl)|(ctd_beta700_raw_btl_woceqc)|(ctd_beta700_raw_ctd)|(ctd_beta700_raw_ctd_woceqc)|(ctd_cdom_ctd)|(ctd_cdom_ctd_woceqc)|(ctd_cdom_raw_btl)|(ctd_cdom_raw_btl_woceqc)|(ctd_cdom_raw_ctd)|(ctd_cdom_raw_ctd_woceqc)|(ctd_fluor_arbitrary_ctd)|(ctd_fluor_btl)|(ctd_fluor_btl_woceqc)|(ctd_fluor_ctd)|(ctd_fluor_ctd_woceqc)|(ctd_fluor_raw_btl)|(ctd_fluor_raw_btl_woceqc)|(ctd_fluor_raw_ctd)|(ctd_fluor_raw_ctd_woceqc)|(ctd_nitrate_ctd)|(ctd_nitrate_ctd_woceqc)|(ctd_number_of_observations_ctd)|(ctd_optode_oxygen_btl)|(ctd_optode_oxygen_btl_woceqc)|(ctd_optode_oxygen_ctd)|(ctd_optode_oxygen_ctd_woceqc)|(ctd_optode_oxygen_raw_btl)|(ctd_optode_oxygen_raw_btl_woceqc)|(ctd_optode_oxygen_raw_ctd)|(ctd_optode_oxygen_raw_ctd_woceqc)|(ctd_oxygen_umol_l_ctd)|(ctd_pressure_raw_btl)|(ctd_temperature_unk_ctd)|(ctd_temperature_unk_ctd_woceqc)|(ctd_transmissometer_btl)|(ctd_transmissometer_btl_woceqc)|(ctd_transmissometer_ctd)|(ctd_transmissometer_ctd_woceqc)|(ctd_transmissometer_raw_btl)|(ctd_transmissometer_raw_btl_woceqc)|(ctd_transmissometer_raw_ctd)|(ctd_transmissometer_raw_ctd_woceqc)|(ctd_turbidity_ftu_ctd)|(ctd_turbidity_ftu_ctd_woceqc)|(ctd_turbidity_ntu_ctd)|(ctd_turbidity_ntu_ctd_woceqc)|(cyanobacteria_cell_count_btl)|(cyanobacteria_cell_count_btl_woceqc)|(d15n_n2_btl)|(d15n_n2_btl_woceqc)|(d15n_n2_error_btl)|(d15n_nitrite_nitrate_btl)|(d15n_nitrite_nitrate_btl_woceqc)|(d15n_no3_btl)|(d15n_no3_btl_woceqc)|(d15n_no3_error_btl)|(d18o_nitrate_btl)|(d18o_nitrate_btl_woceqc)|(d18o_nitrite_nitrate_btl)|(d18o_nitrite_nitrate_btl_woceqc)|(del_carbon_13_dic_btl)|(del_carbon_13_dic_btl_woceqc)|(del_carbon_13_dic_error_btl)|(del_carbon_14_dic_btl)|(del_carbon_14_dic_btl_woceqc)|(del_carbon_14_dic_error_btl)|(del_nitrogen_15_btl)|(del_nitrogen_15_btl_woceqc)|(del_oxygen_18_btl)|(del_oxygen_18_btl_woceqc)|(del_oxygen_18_error_btl)|(delta_helium_3_btl)|(delta_helium_3_btl_woceqc)|(delta_helium_3_error_btl)|(density_salinity2_btl)|(density_salinity2_btl_woceqc)|(density_salinity_btl)|(density_salinity_btl_woceqc)|(density_salinity_practical_salinity2_btl)|(density_salinity_practical_salinity2_btl_woceqc)|(density_salinity_practical_salinity_btl)|(density_salinity_practical_salinity_btl_woceqc)|(dissolved_organic_carbon_13_btl)|(dissolved_organic_carbon_13_btl_woceqc)|(dissolved_organic_carbon_13_error_btl)|(dissolved_organic_carbon_14_btl)|(dissolved_organic_carbon_14_btl_woceqc)|(dissolved_organic_carbon_14_error_btl)|(dissolved_organic_carbon_btl)|(dissolved_organic_carbon_btl_woceqc)|(dissolved_organic_nitrogen_btl)|(dissolved_organic_nitrogen_btl_woceqc)|(downcast_oxygen_btl)|(downcast_oxygen_btl_woceqc)|(downcast_pressure_btl)|(downcast_pressure_btl_woceqc)|(doxy_btl)|(doxy_btl_woceqc)|(doxy_ctd)|(doxy_ctd_woceqc)|(fco2_btl)|(fco2_btl_woceqc)|(fco2_in_situ_btl)|(fco2_temperature_btl)|(fm_depth_btl)|(fm_depth_ctd)|(fm_depth_ctd_woceqc)|(fucose_btl)|(fucose_btl_woceqc)|(geotraces_sample_btl)|(helium_btl)|(helium_btl_woceqc)|(helium_error_btl)|(hplc_19_hexanoyloxyfucoxanthin_btl)|(hplc_19_hexanoyloxyfucoxanthin_btl_woceqc)|(hplc_19butanoyloxyfucoxanthin_btl)|(hplc_19butanoyloxyfucoxanthin_btl_woceqc)|(hplc_alloxanthin_btl)|(hplc_alloxanthin_btl_woceqc)|(hplc_alpha_beta_carotenes_btl)|(hplc_alpha_beta_carotenes_btl_woceqc)|(hplc_chlorophyll_c1_c2_btl)|(hplc_chlorophyll_c1_c2_btl_woceqc)|(hplc_chlorophyll_c2_btl)|(hplc_chlorophyll_c2_btl_woceqc)|(hplc_chlorophyll_c3_btl)|(hplc_chlorophyll_c3_btl_woceqc)|(hplc_chlorophyllide_a_btl)|(hplc_chlorophyllide_a_btl_woceqc)|(hplc_diadinoxanthin_btl)|(hplc_diadinoxanthin_btl_woceqc)|(hplc_diatoxanthin_btl)|(hplc_diatoxanthin_btl_woceqc)|(hplc_divinyl_chlorophyll_a_btl)|(hplc_divinyl_chlorophyll_a_btl_woceqc)|(hplc_lutein_btl)|(hplc_lutein_btl_woceqc)|(hplc_monovinyl_chlorophyll_a_btl)|(hplc_monovinyl_chlorophyll_a_btl_woceqc)|(hplc_monovinyl_chlorophyll_b_btl)|(hplc_monovinyl_chlorophyll_b_btl_woceqc)|(hplc_neoxanthin_btl)|(hplc_neoxanthin_btl_woceqc)|(hplc_peridinin_btl)|(hplc_peridinin_btl_woceqc)|(hplc_pheophorbide_a_btl)|(hplc_pheophorbide_a_btl_woceqc)|(hplc_pheophytin_a_btl)|(hplc_pheophytin_a_btl_woceqc)|(hplc_placeholder_btl_woceqc)|(hplc_prasinoxanthin_btl)|(hplc_prasinoxanthin_btl_woceqc)|(hplc_tot_chl_a_btl)|(hplc_tot_chl_a_btl_woceqc)|(hplc_tot_chl_b_btl)|(hplc_tot_chl_b_btl_woceqc)|(hplc_tot_chl_c_btl)|(hplc_tot_chl_c_btl_woceqc)|(hplc_violaxanthin_btl)|(hplc_violaxanthin_btl_woceqc)|(hplc_zeaxanthin_btl)|(hplc_zeaxanthin_btl_woceqc)|(hpld_antheraxanthin_btl)|(hpld_antheraxanthin_btl_woceqc)|(krypton_btl)|(krypton_btl_woceqc)|(krypton_error_btl)|(methane_btl)|(methane_l_btl)|(methane_l_btl_woceqc)|(methyl_chloroform_btl)|(methyl_chloroform_btl_woceqc)|(n2_argon_ratio_btl)|(n2_argon_ratio_btl_woceqc)|(n2_argon_ratio_error_btl)|(n2_argon_ratio_unstripped_btl)|(n2_argon_ratio_unstripped_btl_woceqc)|(n2_argon_ratio_unstripped_error_btl)|(neon_btl)|(neon_btl_woceqc)|(neon_error_btl)|(nitrate_btl)|(nitrate_btl_woceqc)|(nitrate_error_btl)|(nitrite_btl)|(nitrite_btl_woceqc)|(nitrite_error_btl)|(nitrite_nitrate_btl)|(nitrite_nitrate_btl_woceqc)|(nitrite_nitrate_l_btl)|(nitrite_nitrate_l_btl_woceqc)|(nitrous_oxide_btl)|(nitrous_oxide_btl_woceqc)|(odf_pressure_btl)|(oxygen_btl)|(oxygen_btl_woceqc)|(oxygen_ml_l_btl)|(oxygen_ml_l_btl_woceqc)|(package_depth_btl)|(par_btl)|(par_btl_woceqc)|(par_ctd)|(par_ctd_woceqc)|(par_raw_btl)|(par_raw_btl_woceqc)|(partial_co2_temperature_btl)|(partial_pressure_of_co2_btl)|(partial_pressure_of_co2_btl_woceqc)|(particulate_organic_carbon_btl)|(particulate_organic_carbon_btl_woceqc)|(particulate_organic_nitrogen_btl)|(particulate_organic_nitrogen_btl_woceqc)|(ph_nbs_btl)|(ph_nbs_btl_woceqc)|(ph_sws_btl)|(ph_sws_btl_woceqc)|(ph_temperature_btl)|(ph_total_h_scale_btl)|(ph_total_h_scale_btl_woceqc)|(ph_unknown_scale_btl)|(ph_unknown_scale_btl_woceqc)|(phaeophytin_btl)|(phaeophytin_btl_woceqc)|(phaeophytin_ug_l_btl)|(phaeophytin_ug_l_btl_woceqc)|(phosphate_btl)|(phosphate_btl_woceqc)|(phosphate_error_btl)|(phosphate_l_btl)|(phosphate_l_btl_woceqc)|(phytoplankton_cell_count_btl)|(phytoplankton_cell_count_btl_woceqc)|(potential_temperature_68_btl)|(potential_temperature_c_btl)|(potential_temperature_c_btl_woceqc)|(potential_temperature_c_ctd)|(potential_temperature_ctd)|(potential_temperature_ctd_woceqc)|(pressure)|(pressure_btl_woceqc)|(pressure_ctd_woceqc)|(radium_226_btl)|(radium_226_btl_woceqc)|(radium_226_error_btl)|(radium_228_226_btl)|(radium_228_226_btl_woceqc)|(radium_228_226_error_btl)|(radium_228_btl)|(radium_228_btl_woceqc)|(radium_228_error_btl)|(ref_temperature_btl)|(ref_temperature_btl_woceqc)|(ref_temperature_c_btl)|(ref_temperature_c_btl_woceqc)|(reference_salinity_btl)|(reference_salinity_btl_woceqc)|(rev_pressure_btl)|(rev_pressure_btl_woceqc)|(rev_temperature_90_btl)|(rev_temperature_90_btl_woceqc)|(rev_temperature_btl)|(rev_temperature_btl_woceqc)|(rev_temperature_c_btl)|(rev_temperature_c_btl_woceqc)|(salinity_btl)|(salinity_btl_woceqc)|(salinity_ctd)|(salinity_ctd_woceqc)|(sample_btl)|(sample_ctd)|(sigma0_btl)|(silicate_btl)|(silicate_btl_woceqc)|(silicate_error_btl)|(silicate_l_btl)|(silicate_l_btl_woceqc)|(sm_depth_btl)|(sm_depth_ctd)|(sm_depth_ctd_woceqc)|(somma_salinity_btl)|(spar_raw_btl)|(spar_raw_btl_woceqc)|(stable_isotope_probing_placeholder_btl)|(stable_isotope_probing_placeholder_btl_woceqc)|(sulfur_hexifluoride_btl)|(sulfur_hexifluoride_btl_woceqc)|(temperature_btl)|(temperature_btl_woceqc)|(temperature_ctd)|(temperature_ctd_woceqc)|(total_alkalinity_btl)|(total_alkalinity_btl_woceqc)|(total_carbon_btl)|(total_carbon_btl_woceqc)|(total_dissolved_nitrogen_btl)|(total_dissolved_nitrogen_btl_woceqc)|(total_dissolved_phosphorus_btl)|(total_dissolved_phosphorus_btl_woceqc)|(total_organic_carbon_btl)|(total_organic_carbon_btl_woceqc)|(total_organic_carbon_l_btl)|(total_organic_carbon_l_btl_woceqc)|(total_organic_nitrogen_btl)|(total_organic_nitrogen_btl_woceqc)|(total_organic_nitrogen_l_btl)|(total_organic_nitrogen_l_btl_woceqc)|(trifluoromethylsulfur_pentafluoride_btl)|(trifluoromethylsulfur_pentafluoride_btl_woceqc)|(tritium_btl)|(tritium_btl_woceqc)|(tritium_error_btl)|(urea_btl)|(urea_btl_woceqc)|(user_bottle_number_btl)|(user_bottle_number_btl_woceqc)|(user_sample_number_btl)|(user_station_number_btl)|(xenon_btl)|(xenon_btl_woceqc)|(xenon_error_btl){1})|all|except-data-values|[0-9]+)$"
                     },
                     "example": "temperature_btl,~salinity_ctd"
                  }
               },
               {
                  "$ref": "#/components/parameters/presRange"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/cchdo"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/cchdo/meta": {
         "get": {
            "tags": [
               "cchdo"
            ],
            "summary": "GO-SHIP metadata search and filter.",
            "operationId": "findCCHDOmeta",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/woceline"
               },
               {
                  "$ref": "#/components/parameters/cchdo_cruise"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/cchdoMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/cchdo/vocabulary": {
         "get": {
            "tags": [
               "cchdo"
            ],
            "summary": "List all possible values for certain CCHDO query string parameters",
            "operationId": "cchdoVocab",
            "parameters": [
               {
                  "in": "query",
                  "name": "parameter",
                  "required": true,
                  "description": "GO-SHIP query string parameter to summarize possible values of.",
                  "schema": {
                     "type": "string",
                     "enum": ["woceline", "cchdo_cruise", "source", "data", "metadata"]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "Argo search and filter.",
            "operationId": "findArgo",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/startDate"
               },
               {
                  "$ref": "#/components/parameters/endDate"
               },
               {
                  "$ref": "#/components/parameters/polygon"
               },
               {
                  "$ref": "#/components/parameters/multipolygon"
               },
               {
                  "$ref": "#/components/parameters/winding"
               },
               {
                  "$ref": "#/components/parameters/center"
               },
               {
                  "$ref": "#/components/parameters/radius"
               },
               {
                  "$ref": "#/components/parameters/metadata"
               },
               {
                  "$ref": "#/components/parameters/platformID"
               },
               {
                  "$ref": "#/components/parameters/platform_type"
               },
               {
                  "$ref": "#/components/parameters/profileSource"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "$ref": "#/components/parameters/mostrecent"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Keys of data to include. Return only documents that have all data requested, within the pressure range if specified. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "$ref": "#/components/schemas/argo_data_keys"
                  }
               },
               {
                  "$ref": "#/components/parameters/presRange"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argo"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo/meta": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "Argo metadata search and filter.",
            "operationId": "findArgometa",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/platformID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argoMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo/vocabulary": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "List all possible values for certain Argo query string parameters",
            "operationId": "argoVocab",
            "parameters": [
               {
                  "in": "query",
                  "name": "parameter",
                  "required": true,
                  "description": "Argo query string parameter to summarize possible values of.",
                  "schema": {
                     "type": "string",
                     "enum": ["platform", "source", "data", "metadata", "platform_type"]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo/overview": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "Summarizes some collection-level statistics about Argo data.",
            "operationId": "argoOverview",
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "_id": {
                                 "type": "string",
                                 "enum": ["argo_overview"]
                              },
                              "summary": {
                                 "type": "object",
                                 "properties": {
                                    "nCore": {
                                       "type": "number"
                                    },
                                    "nBGC": {
                                       "type": "number"
                                    },
                                    "nDeep": {
                                       "type": "number"
                                    },
                                    "mostrecent": {                       
                                       "type": "string",
                                       "format": "date-time",
                                       "example": "2010-01-01T00:00:00Z"
                                    },
                                    "datacenters": {
                                       "type": "array",
                                       "items": {
                                          "type": "string"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo/dacs": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "Summarizes some datacenter-level statistics about Argo data.",
            "operationId": "argoDACs",
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "_id": {
                                 "type": "string",
                                 "enum": ["argo_dacs"]
                              },
                              "summary": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "_id": {
                                          "type": "string"
                                       },
                                       "n": {
                                          "type": "number"
                                       },
                                       "mostrecent": {                       
                                          "type": "string",
                                          "format": "date-time",
                                          "example": "2010-01-01T00:00:00Z"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argo/bgc": {
         "get": {
            "tags": [
               "argo"
            ],
            "summary": "Summarizes some float-level statistics for Argo BGC floats.",
            "operationId": "argoBGC",
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "_id": {
                                 "type": "string",
                                 "enum": ["argo_bgc"]
                              },
                              "summary": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "_id": {
                                          "type": "string"
                                       },
                                       "n": {
                                          "type": "number"
                                       },
                                       "mostrecent": {                       
                                          "type": "string",
                                          "format": "date-time",
                                          "example": "2010-01-01T00:00:00Z"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argotrajectories": {
         "get": {
            "tags": [
               "Argo trajectories (experimental)"
            ],
            "summary": "Argo trajectory search and filter.",
            "operationId": "findArgoTrajectory",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/startDate"
               },
               {
                  "$ref": "#/components/parameters/endDate"
               },
               {
                  "$ref": "#/components/parameters/polygon"
               },
               {
                  "$ref": "#/components/parameters/multipolygon"
               },
               {
                  "$ref": "#/components/parameters/winding"
               },
               {
                  "$ref": "#/components/parameters/center"
               },
               {
                  "$ref": "#/components/parameters/radius"
               },
               {
                  "$ref": "#/components/parameters/metadata"
               },
               {
                  "$ref": "#/components/parameters/platformID"
               },
               {
                  "$ref": "#/components/parameters/compression"
               },
               {
                  "$ref": "#/components/parameters/mostrecent"
               },
               {
                  "name": "data",
                  "in": "query",
                  "description": "Keys of data to include. Return only documents that have all data requested. Accepts ~ negation to filter out documents including the specified data. Omission of this parameter will result in metadata only responses.",
                  "style": "form",
                  "explode": false,
                  "allowReserved": true,
                  "schema": {
                     "$ref": "#/components/schemas/argotrajectory_data_keys"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argotrajectory"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argotrajectories/meta": {
         "get": {
            "tags": [
               "Argo trajectories (experimental)"
            ],
            "summary": "Argo trajectory metadata search and filter.",
            "operationId": "findArgotrajectorymeta",
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               },
               {
                  "$ref": "#/components/parameters/platformID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/argotrajectoryMeta"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/argotrajectories/vocabulary": {
         "get": {
            "tags": [
               "Argo trajectories (experimental)"
            ],
            "summary": "List all possible values for certain Argo trajectory query string parameters",
            "operationId": "argotrajectoryVocab",
            "parameters": [
               {
                  "in": "query",
                  "name": "parameter",
                  "required": true,
                  "description": "Argo trajectory query string parameter to summarize possible values of.",
                  "schema": {
                     "type": "string",
                     "enum": ["platform"]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/summary": {
         "get": {
            "tags": [
               "summary (experimental)"
            ],
            "summary": "Fetch a document from the summary collection by ID.",
            "operationId": "fetchSummary",   
            "parameters": [
               {
                  "$ref": "#/components/parameters/genericID"
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object"
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      },
      "/token": {
         "get": {
            "tags": [
               "token"
            ],
            "summary": "validate an API token",
            "operationId": "validateToken",
            "parameters": [
               {
                  "in": "query",
                  "name": "token",
                  "required": true,
                  "description": "token to validate",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object"
                        }
                     }
                  }
               },
               "400": {
                  "$ref": "#/components/responses/badRequest"
               },
               "404": {
                  "$ref": "#/components/responses/notFound"
               },
               "500": {
                  "$ref": "#/components/responses/serverError"
               }
            }
         }
      }
   },
   "components": {
      "schemas": {
         "arShapeSchema": {
            "type": "object",
            "required": [
               "_id",
               "date",
               "shapeId",
               "geolocation",
               "date_formatted"
            ],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "date": {
                  "type": "string",
                  "format": "date-time"
               },
               "shapeId": {
                  "type": "integer"
               },
               "geolocation": {
                  "$ref": "#/components/schemas/geoJSONpolygon"
               },
               "date_formateed": {
                  "type": "string",
                  "format": "date"
               }
            }
         },
         "argone": {
            "type": "object",
            "required": ["_id", "metadata", "geolocation", "geolocation_forecast"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "geolocation_forecast": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               }
            }
         },
         "argoneMeta": {
            "type": "object",
            "required": ["_id", "data_type", "date_updated_argovis", "source", "levels", "data_info"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "data_type": {
                  "type": "string"
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "levels": {
                  "type": "array",
                  "items": {
                     "type": "number"
                  }
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               }
            }
         },
         "tc": {
            "type": "object",
            "required": ["_id", "metadata", "geolocation", "basin", "timestamp", "record_identifier", "class"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "basin": {
                  "type": "number"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               },
               "record_identifier": {
                  "type": "string"
               },
               "class": {
                  "type": "string"
               }
            }
         },
         "tcMeta": {
            "type": "object",
            "required": ["_id", "data_type", "date_updated_argovis", "source", "name", "num", "data_info"],
            "properties":{
               "_id": {
                  "type": "string"
               },
               "data_type": {
                  "type": "string"
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "name": {
                  "type": "string"
               },
               "num": {
                  "type": "number"
               }
            }
         },
         "grid": {
            "type": "object",
            "required": ["_id", "metadata", "geolocation", "basin", "timestamp"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "basin": {
                  "type": "number"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               }
            }
         },
         "gridMeta": {
            "type": "object",
            "required": ["_id", "data_type", "date_updated_argovis", "source", "levels", "data_info"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "data_type": {
                  "type": "string"
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "levels": {
                  "type": "array",
                  "items": {
                     "type": "number"
                  }
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               }
            }
         },
         "geoJSONpoint": {
            "type": "object",
            "required": ["type", "coordinates"],
            "properties": {
               "type": {
                  "type": "string"
               },
               "coordinates": {
                  "type": "array",
                  "items": {
                     "type": "number",
                     "minItems": 2,
                     "maxItems": 2
                  }
               }
            }
         },
         "geoJSONpolygon": {
            "type": "object",
            "properties": {
               "type": {
                  "type": "string"
               },
               "coordinates": {
                  "type": "array",
                  "items": {
                     "type": "array",
                     "items": {
                        "type": "number",
                        "minItems": 2,
                        "maxItems": 2
                     }
                  }
               }
            }
         },
         "data": {
            "type": "array",
            "items": {
               "type": "array",
               "items": {
                  "anyOf": [ {"type": "string"}, {"type": "number"}]
               }
            }
         },
         "data_info": {
            "type": "array",
            "items": {
               "anyOf": [
                  {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  },
                  {
                     "type": "array",
                     "items": {
                        "type": "array",
                        "items": {
                           "anyOf": [ {"type": "string"}, {"type": "number"}]
                        }
                     }
                  }
               ]
            }
         },
         "generic_source_info": {
            "type": "object",
            "required": ["source"],
            "properties": {
               "source": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "url": {
                  "type": "string"
               },
               "date_updated": {
                  "type": "string",
                  "format": "date-time"
               },
               "doi": {
                  "type": "string"
               }
            }
         },
         "cchdo": {
            "type": "object",
            "required": ["_id","metadata","geolocation","basin","timestamp", "data_info", "source", "station", "cast"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "basin": {
                  "type": "number"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "data_warning": {
                  "type": "array",
                  "items": {
                     "type": "string",
                     "enum": ["degenerate_levels", "missing_basin", "missing_location", "missing_timestamp"]
                  }
               },
               "station": {
                  "type": "string"
               },
               "cast": {
                  "type": "number"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               }
            }
         },
         "cchdoMeta": {
            "type": "object",
            "required": ["_id", "date_updated_argovis", "data_type", "expocode", "cchdo_cruise_id", "woce_lines"],
            "properties":{
               "_id": {
                  "type": "string"
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "data_type": {
                  "type": "string"
               },
               "country": {
                  "type": "string"
               },
               "data_center": {
                  "type": "string"
               },
               "instrument": {
                  "type": "string"
               },
               "pi_name": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "expocode": {
                  "type": "string"
               },
               "cchdo_cruise_id": {
                  "type": "number"
               },
               "woce_lines": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               }
            }
         },
         "argo": {
            "type": "object",
            "required": ["_id","metadata","geolocation","basin","timestamp", "date_updated_argovis", "source", "cycle_number", "data_info"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "basin": {
                  "type": "number"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "data_warning": {
                  "type": "array",
                  "items": {
                     "type": "string",
                     "enum": ["degenerate_levels", "missing_basin", "missing_location", "missing_timestamp"]
                  }
               },
               "cycle_number": {
                  "type": "number"
               },
               "geolocation_argoqc": {
                  "type": "number"
               },
               "profile_direction": {
                  "type": "string"
               },
               "timestamp_argoqc": {
                  "type": "number"
               },
               "vertical_sampling_scheme": {
                  "type": "string"
               }
            }
         },
         "argoMeta": {
            "type": "object",
            "required": ["_id", "data_type"],
            "properties":{
               "_id": {
                  "type": "string"
               },
               "data_type": {
                  "type": "string"
               },
               "country": {
                  "type": "string"
               },
               "data_center": {
                  "type": "string"
               },
               "instrument": {
                  "type": "string"
               },
               "pi_name": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "platform": {
                  "type": "string"
               },
               "platform_type": {
                  "type": "string"
               },
               "fleetmonitoring": {
                  "type": "string"
               },
               "oceanops": {
                  "type": "string"
               },
               "positioning_system": {
                  "type": "string"
               },
               "wmo_inst_type": {
                  "type": "string"
               }
            }
         },
         "argotrajectory": {
            "type": "object",
            "required": ["_id", "cycle_number", "geolocation", "timestamp", "metadata", "geolocation_descending", "timestamp_descending", "geolocation_descending_transmitted", "timestamp_descending_transmitted", "geolocation_ascending", "timestamp_ascending", "geolocation_ascending_transmitted", "timestamp_ascending_transmitted", "geolocation_midpoint_transmitted", "timestamp_midpoint_transmitted"],
            "properties": {
               "_id": {
                  "type": "string"
               },
               "cycle_number": {
                  "type": "number"
               },
               "geolocation": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp": {
                  "type": "string",
                  "format": "date-time"
               },
               "geolocation_descending": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp_descending": {
                  "type": "string",
                  "format": "date-time"
               },
               "geolocation_ascending": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp_ascending": {
                  "type": "string",
                  "format": "date-time"
               },
               "geolocation_descending_transmitted": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp_descending_transmitted": {
                  "type": "string",
                  "format": "date-time"
               },
               "geolocation_ascending_transmitted": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp_ascending_transmitted": {
                  "type": "string",
                  "format": "date-time"
               },
               "geolocation_midpoint_transmitted": {
                   "$ref": "#/components/schemas/geoJSONpoint"
               },
               "timestamp_midpoint_transmitted": {
                  "type": "string",
                  "format": "date-time"
               },
               "metadata": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "data": {
                  "$ref": "#/components/schemas/data"
               }
            }
         },
         "argotrajectoryMeta": {
            "type": "object",
            "required": ["_id", "data_type"],
            "properties":{
               "_id": {
                  "type": "string"
               },
               "platform": {
                  "type": "string"
               },
               "data_type": {
                  "type": "string"
               },
               "source": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/generic_source_info"
                  }
               },
               "date_updated_argovis": {
                  "type": "string",
                  "format": "date-time"
               },
               "positioning_system_flag": {
                  "type": "number"
               },
               "sensor_type_flag": {
                  "type": "number"
               },
               "mission_flag": {
                  "type": "number"
               },
               "extrapolation_flag": {
                  "type": "number"
               },
               "positioning_system": {
                  "type": "string"
               },
               "platform_type": {
                  "type": "string"
               },
               "data_info": {
                  "$ref": "#/components/schemas/data_info"
               }
            }
         },
         "data_adjacent": {
            "anyOf": [
               {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               {
                  "type": "object",
                  "additionalProperties": {
                     "type": "string"
                  }       
               }
            ]  
         },
         "argo_data_keys": {
            "type": "array",
            "items": {
               "type": "string",
               "pattern": "^((~)?((bbp470)|(bbp532)|(bbp700)|(bbp700_2)|(bisulfide)|(cdom)|(chla)|(cndc)|(cndx)|(cp660)|(down_irradiance380)|(down_irradiance412)|(down_irradiance442)|(down_irradiance443)|(down_irradiance490)|(down_irradiance555)|(down_irradiance670)|(downwelling_par)|(doxy)|(doxy2)|(doxy3)|(molar_doxy)|(nitrate)|(ph_in_situ_total)|(pressure)|(salinity)|(salinity_sfile)|(temperature)|(temperature_sfile)|(turbidity)|(up_radiance412)|(up_radiance443)|(up_radiance490)|(up_radiance555){1})((_std)|(_med){1})?(_argoqc)?|all|except-data-values|[0-9]+)$"
            }
         },
         "argotrajectory_data_keys": {
            "type": "array",
            "items": {
               "type": "string",
               "pattern": "^((~)?((velocity_zonal)|(velocity_meridional)|(velocity_zonal_transmitted)|(velocity_meridional_transmitted)|(speed)|(speed_transmitted)|(drift_pres)|(drift_temp)|(number_surface_fixes){1})|all|except-data-values)$"
            }
         },
         "errorResponse": {
            "type": "object",
            "required": [
               "code",
               "message"
            ],
            "properties": {
               "code": {
                  "type": "integer"
               },
               "message": {
                  "type": "string"
               }
            }
         }
      },
      "parameters": {
         "arDate": {
            "in": "query",
            "name": "date",
            "required": false,
            "description": "three hour increments starting at 2004-01-01T00:00:00 and ending at 2017-04-02T03:00:00",
            "allowReserved": true,
            "schema": {
               "type": "string",
               "format": "date-time",
               "example": "2010-01-01T00:00:00Z"
            }
         },
         "arID": {
            "in": "query",
            "name": "_id",
            "required": false,
            "description": "ID of an atmospheric river object",
            "schema": {
               "type": "string",
               "example": "1_262992"
            }
         },
         "tcName": {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "name of tropical cyclone",
            "schema": {
               "type": "string",
               "example": "LANE"
            }
         },
         "startDate": {
            "in": "query",
            "name": "startDate",
            "description": "ISO 8601 UTC date-time formatted string indicating the beginning of the time period of interest.",
            "allowReserved": true,
            "schema": {
               "type": "string",
               "format": "date-time",
               "example": "2010-01-01T00:00:00Z"
            }
         },
         "endDate": {
            "in": "query",
            "name": "endDate",
            "description": "ISO 8601 UTC date-time formatted string indicating the end of the time period of interest.",
            "allowReserved": true,
            "schema": {
               "type": "string",
               "format": "date-time",
               "example": "2010-01-01T00:00:00Z"
            }
         },
         "gridName": {
            "in": "query",
            "name": "gridName",
            "required": true,
            "description": "name of the gridded product to query.",
            "schema": {
               "type": "string",
               "example": "rgTempTotal"
            }
         },
         "presRange": {
            "in": "query",
            "name": "presRange",
            "description": "Pressure range in dbar to filter for; levels outside this range will not be returned.",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
               "type": "array",
               "items": {
                  "type": "number",
                  "minItems": 2,
                  "maxItems": 2
               },
               "example": "10,20.1"
            }
         },
         "forecastOrigin": {
            "in": "query",
            "name": "forecastOrigin",
            "description": "Longitude,latitude of forecast origin location.",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
               "type": "array",
               "items": {
                  "type": "number",
                  "minItems": 2,
                  "maxItems": 2
               },
               "example": "10,20.1"
            }
         },
         "forecastGeolocation": {
            "in": "query",
            "name": "forecastGeolocation",
            "description": "Longitude,latitude of forecast destination location.",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
               "type": "array",
               "items": {
                  "type": "number",
                  "minItems": 2,
                  "maxItems": 2
               },
               "example": "10,20.1"
            }
         },
         "profileSource": {
            "in": "query",
            "name": "source",
            "description": "Experimental program source(s) to search for; document must match all sources to be returned. Accepts ~ negation to filter out documents. See /<data route>/vocabulary?parameter=source for list of options.",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
               "type": "array",
               "items": {
                  "type": "string"
               },
               "example": "argo_bgc,~argo_core"
            }
         },
         "woceline": {
            "in": "query",
            "name": "woceline",
            "description": "WOCE line to search for. See /cchdo/vocabulary?parameter=woceline for list of options.",
            "schema": {
               "type": "string",
               "example": "A10"
            } 
         },
         "cchdo_cruise": {
            "in": "query",
            "name": "cchdo_cruise",
            "description": "CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise for list of options.",
            "schema": {
               "type": "number",
               "example": 518
            } 
         },
         "compression": {
            "in": "query",
            "name": "compression",
            "description": "Data minification strategy to apply.",
            "schema": {
               "type": "string",
               "enum": ["minimal"]
            }
         },
         "winding": {
            "in": "query",
            "name": "winding",
            "description": "Enforce ccw winding for polygon and multipolygon",
            "schema": {
               "type": "string",
               "enum": ["true"]
            }
         },
         "genericID": {
            "in": "query",
            "name": "id",
            "description": "Unique ID to search for.",
            "schema": {
               "type": "string",
               "example": "4902911_0"
            }
         },
         "platformID": {
            "in": "query",
            "name": "platform",
            "description": "Unique platform ID to search for.",
            "schema": {
               "type": "string",
               "example": "4902911"
            }
         },
         "platform_type": {
            "in": "query",
            "name": "platform_type",
            "description": "Make/model of platform",
            "schema": {
               "type": "string",
               "example": "PALACE"
            }
         },
         "polygon": {
            "in": "query",
            "name": "polygon",
            "description": "array of [lon, lat] vertices describing a polygon bounding the region of interest; final point must match initial point",
            "allowReserved": true,
            "schema": {
               "type": "string",
               "example": "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
            }
         },
         "multipolygon": {
            "in": "query",
            "name": "multipolygon",
            "description": "array of polygon regions; region of interest is taken as the intersection of all listed polygons.",
            "allowReserved": true,
            "schema": {
               "type": "string",
               "example": "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
            }
         },
         "center": {
            "in": "query",
            "name": "center",
            "description": "center to measure max radius from when defining circular region of interest; must be used in conjunction with query string parameter 'radius'.",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
               "type": "array",
               "items": {
                  "type": "number",
                  "minItems": 2,
                  "maxItems": 2
               },
               "example": "10,20.1"
            }
         },
         "radius": {
            "in": "query",
            "name": "radius",
            "description": "km from centerpoint when defining circular region of interest; must be used in conjunction with query string parameter 'center'.",
            "schema": {
               "type": "number",
               "example": 50
            }
         },
         "mostrecent": {
            "in": "query",
            "name": "mostrecent",
            "description": "get back only the n records with the most recent values of timestamp.",
            "schema": {
               "type": "number"
            }
         },
         "lat": {
            "in": "query",
            "name": "lat",
            "required": true,
            "description": "latitude (degrees) of Argo float location",
            "schema": {
               "type": "number",
               "minimum": -90,
               "maximum": 90,
               "example": 5.25
            }
         },
         "lon": {
            "in": "query",
            "name": "lon",
            "required": true,
            "description": "longitude (degrees) of Argo float location",
            "schema": {
               "type": "number",
               "minimum": -180,
               "maximum": 180,
               "example": -20.33
            }
         },
         "forcastDays": {
            "in": "query",
            "name": "forcastDays",
            "required": true,
            "description": "number of days over which to project Argo float drift",
            "schema": {
               "type": "number",
               "minimum": 60,
               "maximum": 1800,
               "example": 60,
               "enum": [
                  60,
                  120,
                  140,
                  240,
                  360,
                  480,
                  720,
                  840,
                  960,
                  1080,
                  1200,
                  1320,
                  1440,
                  1560,
                  1680,
                  1800
               ]
            }
         },
         "wmo": {
            "in": "query",
            "name": "wmo",
            "description": "World Meteorological Organization identification number",
            "schema": {
               "type": "number",
               "example": 1300915
            }
         },
         "metadata": {
            "in": "query",
            "name": "metadata",
            "description": "metadata pointer",
            "schema":{
               "type": "string"
            }
         }
      },
      "responses": {
         "badRequest": {
            "description": "Bad Request",
            "content": {
               "application/json": {
                  "schema": {
                     "$ref": "#/components/schemas/errorResponse"
                  }
               }
            }
         },
         "notFound": {
            "description": "Not Found",
            "content": {
               "application/json": {
                  "schema": {
                     "$ref": "#/components/schemas/errorResponse"
                  }
               }
            }
         },
         "serverError": {
            "description": "Server Error",
            "content": {
               "application/json": {
                  "schema": {
                     "$ref": "#/components/schemas/errorResponse"
                  }
               }
            }
         }
      }
   }
}