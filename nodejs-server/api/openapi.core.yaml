openapi: 3.0.3
info:
  title: Argovis API
  description: "REST API for Argo profiles, platforms, selections, BGC data, gridded\
    \ products, etc."
  contact:
    name: Argovis Collaboration
    url: https://argovisbeta01.colorado.edu
    email: argovis@colorado.edu
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "2.0"
externalDocs:
  description: Find us on GitHub
  url: https://github.com/argovis/argovis_api
servers:
- url: https://argovis.colorado.edu/api
- url: /
security:
- name: []
tags:
- name: argo
  description: "Argo profile data, including core, BGC and deep floats"
- name: cchdo
  description: CCHDO profile data.
- name: grid
  description: "Gridded products derived from Argo floats, simulation, or satalite\
    \ product"
- name: tc
  description: tropical cyclone data
- name: ar (experimental)
  description: atmospheric river shapes
- name: argone
  description: Argo float position forcast product
- name: summary (experimental)
  description: Summary statistics (mostly for internal use)
- name: token
  description: token validation
paths:
  /ar:
    get:
      tags:
      - ar (experimental)
      summary: Find and filter atmo river shapes.
      operationId: findAR
      parameters:
      - name: date
        in: query
        description: three hour increments starting at 2004-01-01T00:00:00 and ending
          at 2017-04-02T03:00:00
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: _id
        in: query
        description: ID of an atmospheric river object
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 1_262992
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/arShapeSchema'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: ArExperimental
  /argone:
    get:
      tags:
      - argone
      summary: Probabilities of floats moving between two points in a range of forecast
        projections
      operationId: findargone
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: forecastOrigin
        in: query
        description: "Longitude,latitude of forecast origin location."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: forecastGeolocation
        in: query
        description: "Longitude,latitude of forecast destination location."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: data
        in: query
        description: Forecast durations to include. Return only documents that have
          all data requested. Accepts ~ negation to filter out documents including
          the specified data. Omission of this parameter will result in metadata only
          responses.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "90"
          items:
            pattern: "^((~)?((90)|(180)|(270)|(360)|(450)|(540)|(630)|(720)|(810)|(900)|(990)|(1080)|(1170)|(1260)|(1350)|(1440)|(1530)|(1620)|(1710)|(1800){1})|all|except-data-values)$"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argone'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argone
  /argone/meta:
    get:
      tags:
      - argone
      summary: argone metadata search and filter.
      operationId: findargoneMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argoneMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argone
  /tc:
    get:
      tags:
      - tc
      summary: Tropical cyclone search and filter.
      operationId: findTC
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: name
        in: query
        description: name of tropical cyclone
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: LANE
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "wind,~surface_pressure"
          items:
            pattern: "^((~)?((wind)|(surface_pressure){1})|all|except-data-values)$"
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tc'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /tc/meta:
    get:
      tags:
      - tc
      summary: Tropical cyclone metadata search and filter.
      operationId: findTCmeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: name
        in: query
        description: name of tropical cyclone
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: LANE
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tcMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /tc/vocabulary:
    get:
      tags:
      - tc
      summary: List all possible values for certain tc query string parameters
      operationId: tcVocab
      parameters:
      - name: parameter
        in: query
        description: TC query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - data_keys
          - metadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /grids/{gridName}:
    get:
      tags:
      - grid
      summary: Search and filter for grid named in path
      operationId: findgrid
      parameters:
      - name: gridName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - rg09
          - kg21
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: rg09_salinity
          items:
            type: string
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/grid'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /grids/meta:
    get:
      tags:
      - grid
      summary: Metadata for grids by ID
      operationId: findgridMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gridMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /grids/vocabulary:
    get:
      tags:
      - grid
      summary: List all grid names currently available
      operationId: gridVocab
      parameters:
      - name: parameter
        in: query
        description: Grid path or query string parameter to summarize possible values
          of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - gridName
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /cchdo:
    get:
      tags:
      - cchdo
      summary: CCHDO search and filter.
      operationId: findCCHDO
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      - name: cchdo_cruise
        in: query
        description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 518
      - name: source
        in: query
        description: Experimental program source(s) to search for; document must match
          all sources to be returned. Accepts ~ negation to filter out documents.
          See /<data route>/vocabulary?parameter=source for list of options.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "argo_bgc,~argo_core"
          items:
            type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "temperature_btl,~salinity_ctd"
          items:
            pattern: "^((~)?((ammonium_btl)|(ammonium_btl_woceqc)|(argon_btl)|(argon_btl_woceqc)|(argon_error_btl)|(bacterial_cell_count_btl)|(bacterial_cell_count_btl_woceqc)|(barium_btl)|(barium_btl_woceqc)|(barium_l_btl)|(barium_l_btl_woceqc)|(bionbr_btl)|(bnlid_btl)|(bottle_latitude_btl)|(bottle_longitude_btl)|(bottle_number_btl)|(bottle_number_btl_woceqc)|(bottle_salinity_btl)|(bottle_salinity_btl_woceqc)|(bottle_time_btl)|(calcium_btl)|(calcium_btl_woceqc)|(carbon_tetrachloride_btl)|(carbon_tetrachloride_btl_woceqc)|(carbon_tetrachloride_l_btl)|(carbon_tetrachloride_l_btl_woceqc)|(cdom_nasa_placeholder_btl)|(cdom_nasa_placeholder_btl_woceqc)|(cdom_ucsb_placeholder_btl)|(cdom_ucsb_placeholder_btl_woceqc)|(cesium_134_bq_btl)|(cesium_134_bq_btl_woceqc)|(cesium_137_bq_btl)|(cesium_137_bq_btl_woceqc)|(cesium_137_bq_error_btl)|(cfc_113_btl)|(cfc_113_btl_woceqc)|(cfc_113_l_btl)|(cfc_113_l_btl_woceqc)|(cfc_11_btl)|(cfc_11_btl_woceqc)|(cfc_11_error_btl)|(cfc_11_l_btl)|(cfc_11_l_btl_woceqc)|(cfc_12_btl)|(cfc_12_btl_woceqc)|(cfc_12_error_btl)|(cfc_12_l_btl)|(cfc_12_l_btl_woceqc)|(chlorophyll_a_btl)|(chlorophyll_a_btl_woceqc)|(chlorophyll_a_ug_kg_btl)|(chlorophyll_a_ug_kg_btl_woceqc)|(co2_mole_fraction_btl)|(co2_mole_fraction_btl_woceqc)|(ctd_beamcp_btl)|(ctd_beamcp_ctd)|(ctd_beamcp_ctd_woceqc)|(ctd_beta700_raw_btl)|(ctd_beta700_raw_btl_woceqc)|(ctd_beta700_raw_ctd)|(ctd_beta700_raw_ctd_woceqc)|(ctd_cdom_ctd)|(ctd_cdom_ctd_woceqc)|(ctd_cdom_raw_btl)|(ctd_cdom_raw_btl_woceqc)|(ctd_cdom_raw_ctd)|(ctd_cdom_raw_ctd_woceqc)|(ctd_fluor_arbitrary_ctd)|(ctd_fluor_btl)|(ctd_fluor_btl_woceqc)|(ctd_fluor_ctd)|(ctd_fluor_ctd_woceqc)|(ctd_fluor_raw_btl)|(ctd_fluor_raw_btl_woceqc)|(ctd_fluor_raw_ctd)|(ctd_fluor_raw_ctd_woceqc)|(ctd_nitrate_ctd)|(ctd_nitrate_ctd_woceqc)|(ctd_number_of_observations_ctd)|(ctd_optode_oxygen_btl)|(ctd_optode_oxygen_btl_woceqc)|(ctd_optode_oxygen_ctd)|(ctd_optode_oxygen_ctd_woceqc)|(ctd_optode_oxygen_raw_btl)|(ctd_optode_oxygen_raw_btl_woceqc)|(ctd_optode_oxygen_raw_ctd)|(ctd_optode_oxygen_raw_ctd_woceqc)|(ctd_oxygen_umol_l_ctd)|(ctd_pressure_raw_btl)|(ctd_temperature_unk_ctd)|(ctd_temperature_unk_ctd_woceqc)|(ctd_transmissometer_btl)|(ctd_transmissometer_btl_woceqc)|(ctd_transmissometer_ctd)|(ctd_transmissometer_ctd_woceqc)|(ctd_transmissometer_raw_btl)|(ctd_transmissometer_raw_btl_woceqc)|(ctd_transmissometer_raw_ctd)|(ctd_transmissometer_raw_ctd_woceqc)|(ctd_turbidity_ftu_ctd)|(ctd_turbidity_ftu_ctd_woceqc)|(ctd_turbidity_ntu_ctd)|(ctd_turbidity_ntu_ctd_woceqc)|(cyanobacteria_cell_count_btl)|(cyanobacteria_cell_count_btl_woceqc)|(d15n_n2_btl)|(d15n_n2_btl_woceqc)|(d15n_n2_error_btl)|(d15n_nitrite_nitrate_btl)|(d15n_nitrite_nitrate_btl_woceqc)|(d15n_no3_btl)|(d15n_no3_btl_woceqc)|(d15n_no3_error_btl)|(d18o_nitrate_btl)|(d18o_nitrate_btl_woceqc)|(d18o_nitrite_nitrate_btl)|(d18o_nitrite_nitrate_btl_woceqc)|(del_carbon_13_dic_btl)|(del_carbon_13_dic_btl_woceqc)|(del_carbon_13_dic_error_btl)|(del_carbon_14_dic_btl)|(del_carbon_14_dic_btl_woceqc)|(del_carbon_14_dic_error_btl)|(del_nitrogen_15_btl)|(del_nitrogen_15_btl_woceqc)|(del_oxygen_18_btl)|(del_oxygen_18_btl_woceqc)|(del_oxygen_18_error_btl)|(delta_helium_3_btl)|(delta_helium_3_btl_woceqc)|(delta_helium_3_error_btl)|(density_salinity2_btl)|(density_salinity2_btl_woceqc)|(density_salinity_btl)|(density_salinity_btl_woceqc)|(density_salinity_practical_salinity2_btl)|(density_salinity_practical_salinity2_btl_woceqc)|(density_salinity_practical_salinity_btl)|(density_salinity_practical_salinity_btl_woceqc)|(dissolved_organic_carbon_13_btl)|(dissolved_organic_carbon_13_btl_woceqc)|(dissolved_organic_carbon_13_error_btl)|(dissolved_organic_carbon_14_btl)|(dissolved_organic_carbon_14_btl_woceqc)|(dissolved_organic_carbon_14_error_btl)|(dissolved_organic_carbon_btl)|(dissolved_organic_carbon_btl_woceqc)|(dissolved_organic_nitrogen_btl)|(dissolved_organic_nitrogen_btl_woceqc)|(downcast_oxygen_btl)|(downcast_oxygen_btl_woceqc)|(downcast_pressure_btl)|(downcast_pressure_btl_woceqc)|(doxy_btl)|(doxy_btl_woceqc)|(doxy_ctd)|(doxy_ctd_woceqc)|(fco2_btl)|(fco2_btl_woceqc)|(fco2_in_situ_btl)|(fco2_temperature_btl)|(fm_depth_btl)|(fm_depth_ctd)|(fm_depth_ctd_woceqc)|(fucose_btl)|(fucose_btl_woceqc)|(geotraces_sample_btl)|(helium_btl)|(helium_btl_woceqc)|(helium_error_btl)|(hplc_19_hexanoyloxyfucoxanthin_btl)|(hplc_19_hexanoyloxyfucoxanthin_btl_woceqc)|(hplc_19butanoyloxyfucoxanthin_btl)|(hplc_19butanoyloxyfucoxanthin_btl_woceqc)|(hplc_alloxanthin_btl)|(hplc_alloxanthin_btl_woceqc)|(hplc_alpha_beta_carotenes_btl)|(hplc_alpha_beta_carotenes_btl_woceqc)|(hplc_chlorophyll_c1_c2_btl)|(hplc_chlorophyll_c1_c2_btl_woceqc)|(hplc_chlorophyll_c2_btl)|(hplc_chlorophyll_c2_btl_woceqc)|(hplc_chlorophyll_c3_btl)|(hplc_chlorophyll_c3_btl_woceqc)|(hplc_chlorophyllide_a_btl)|(hplc_chlorophyllide_a_btl_woceqc)|(hplc_diadinoxanthin_btl)|(hplc_diadinoxanthin_btl_woceqc)|(hplc_diatoxanthin_btl)|(hplc_diatoxanthin_btl_woceqc)|(hplc_divinyl_chlorophyll_a_btl)|(hplc_divinyl_chlorophyll_a_btl_woceqc)|(hplc_lutein_btl)|(hplc_lutein_btl_woceqc)|(hplc_monovinyl_chlorophyll_a_btl)|(hplc_monovinyl_chlorophyll_a_btl_woceqc)|(hplc_monovinyl_chlorophyll_b_btl)|(hplc_monovinyl_chlorophyll_b_btl_woceqc)|(hplc_neoxanthin_btl)|(hplc_neoxanthin_btl_woceqc)|(hplc_peridinin_btl)|(hplc_peridinin_btl_woceqc)|(hplc_pheophorbide_a_btl)|(hplc_pheophorbide_a_btl_woceqc)|(hplc_pheophytin_a_btl)|(hplc_pheophytin_a_btl_woceqc)|(hplc_placeholder_btl_woceqc)|(hplc_prasinoxanthin_btl)|(hplc_prasinoxanthin_btl_woceqc)|(hplc_tot_chl_a_btl)|(hplc_tot_chl_a_btl_woceqc)|(hplc_tot_chl_b_btl)|(hplc_tot_chl_b_btl_woceqc)|(hplc_tot_chl_c_btl)|(hplc_tot_chl_c_btl_woceqc)|(hplc_violaxanthin_btl)|(hplc_violaxanthin_btl_woceqc)|(hplc_zeaxanthin_btl)|(hplc_zeaxanthin_btl_woceqc)|(hpld_antheraxanthin_btl)|(hpld_antheraxanthin_btl_woceqc)|(krypton_btl)|(krypton_btl_woceqc)|(krypton_error_btl)|(methane_btl)|(methane_l_btl)|(methane_l_btl_woceqc)|(methyl_chloroform_btl)|(methyl_chloroform_btl_woceqc)|(n2_argon_ratio_btl)|(n2_argon_ratio_btl_woceqc)|(n2_argon_ratio_error_btl)|(n2_argon_ratio_unstripped_btl)|(n2_argon_ratio_unstripped_btl_woceqc)|(n2_argon_ratio_unstripped_error_btl)|(neon_btl)|(neon_btl_woceqc)|(neon_error_btl)|(nitrate_btl)|(nitrate_btl_woceqc)|(nitrate_error_btl)|(nitrite_btl)|(nitrite_btl_woceqc)|(nitrite_error_btl)|(nitrite_nitrate_btl)|(nitrite_nitrate_btl_woceqc)|(nitrite_nitrate_l_btl)|(nitrite_nitrate_l_btl_woceqc)|(nitrous_oxide_btl)|(nitrous_oxide_btl_woceqc)|(odf_pressure_btl)|(oxygen_btl)|(oxygen_btl_woceqc)|(oxygen_ml_l_btl)|(oxygen_ml_l_btl_woceqc)|(package_depth_btl)|(par_btl)|(par_btl_woceqc)|(par_ctd)|(par_ctd_woceqc)|(par_raw_btl)|(par_raw_btl_woceqc)|(partial_co2_temperature_btl)|(partial_pressure_of_co2_btl)|(partial_pressure_of_co2_btl_woceqc)|(particulate_organic_carbon_btl)|(particulate_organic_carbon_btl_woceqc)|(particulate_organic_nitrogen_btl)|(particulate_organic_nitrogen_btl_woceqc)|(ph_nbs_btl)|(ph_nbs_btl_woceqc)|(ph_sws_btl)|(ph_sws_btl_woceqc)|(ph_temperature_btl)|(ph_total_h_scale_btl)|(ph_total_h_scale_btl_woceqc)|(ph_unknown_scale_btl)|(ph_unknown_scale_btl_woceqc)|(phaeophytin_btl)|(phaeophytin_btl_woceqc)|(phaeophytin_ug_l_btl)|(phaeophytin_ug_l_btl_woceqc)|(phosphate_btl)|(phosphate_btl_woceqc)|(phosphate_error_btl)|(phosphate_l_btl)|(phosphate_l_btl_woceqc)|(phytoplankton_cell_count_btl)|(phytoplankton_cell_count_btl_woceqc)|(potential_temperature_68_btl)|(potential_temperature_c_btl)|(potential_temperature_c_btl_woceqc)|(potential_temperature_c_ctd)|(potential_temperature_ctd)|(potential_temperature_ctd_woceqc)|(pressure)|(pressure_btl_woceqc)|(pressure_ctd_woceqc)|(radium_226_btl)|(radium_226_btl_woceqc)|(radium_226_error_btl)|(radium_228_226_btl)|(radium_228_226_btl_woceqc)|(radium_228_226_error_btl)|(radium_228_btl)|(radium_228_btl_woceqc)|(radium_228_error_btl)|(ref_temperature_btl)|(ref_temperature_btl_woceqc)|(ref_temperature_c_btl)|(ref_temperature_c_btl_woceqc)|(reference_salinity_btl)|(reference_salinity_btl_woceqc)|(rev_pressure_btl)|(rev_pressure_btl_woceqc)|(rev_temperature_90_btl)|(rev_temperature_90_btl_woceqc)|(rev_temperature_btl)|(rev_temperature_btl_woceqc)|(rev_temperature_c_btl)|(rev_temperature_c_btl_woceqc)|(salinity_btl)|(salinity_btl_woceqc)|(salinity_ctd)|(salinity_ctd_woceqc)|(sample_btl)|(sample_ctd)|(sigma0_btl)|(silicate_btl)|(silicate_btl_woceqc)|(silicate_error_btl)|(silicate_l_btl)|(silicate_l_btl_woceqc)|(sm_depth_btl)|(sm_depth_ctd)|(sm_depth_ctd_woceqc)|(somma_salinity_btl)|(spar_raw_btl)|(spar_raw_btl_woceqc)|(stable_isotope_probing_placeholder_btl)|(stable_isotope_probing_placeholder_btl_woceqc)|(sulfur_hexifluoride_btl)|(sulfur_hexifluoride_btl_woceqc)|(temperature_btl)|(temperature_btl_woceqc)|(temperature_ctd)|(temperature_ctd_woceqc)|(total_alkalinity_btl)|(total_alkalinity_btl_woceqc)|(total_carbon_btl)|(total_carbon_btl_woceqc)|(total_dissolved_nitrogen_btl)|(total_dissolved_nitrogen_btl_woceqc)|(total_dissolved_phosphorus_btl)|(total_dissolved_phosphorus_btl_woceqc)|(total_organic_carbon_btl)|(total_organic_carbon_btl_woceqc)|(total_organic_carbon_l_btl)|(total_organic_carbon_l_btl_woceqc)|(total_organic_nitrogen_btl)|(total_organic_nitrogen_btl_woceqc)|(total_organic_nitrogen_l_btl)|(total_organic_nitrogen_l_btl_woceqc)|(trifluoromethylsulfur_pentafluoride_btl)|(trifluoromethylsulfur_pentafluoride_btl_woceqc)|(tritium_btl)|(tritium_btl_woceqc)|(tritium_error_btl)|(urea_btl)|(urea_btl_woceqc)|(user_bottle_number_btl)|(user_bottle_number_btl_woceqc)|(user_sample_number_btl)|(user_station_number_btl)|(xenon_btl)|(xenon_btl_woceqc)|(xenon_error_btl){1})|all|except-data-values)$"
            type: string
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cchdo'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /cchdo/meta:
    get:
      tags:
      - cchdo
      summary: GO-SHIP metadata search and filter.
      operationId: findCCHDOmeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      - name: cchdo_cruise
        in: query
        description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 518
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cchdoMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /cchdo/vocabulary:
    get:
      tags:
      - cchdo
      summary: List all possible values for certain CCHDO query string parameters
      operationId: cchdoVocab
      parameters:
      - name: parameter
        in: query
        description: GO-SHIP query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - woceline
          - cchdo_cruise
          - source
          - data_keys
          - metadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /argo:
    get:
      tags:
      - argo
      summary: Argo search and filter.
      operationId: findArgo
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      - name: platform_type
        in: query
        description: Make/model of platform
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: PALACE
      - name: source
        in: query
        description: Experimental program source(s) to search for; document must match
          all sources to be returned. Accepts ~ negation to filter out documents.
          See /<data route>/vocabulary?parameter=source for list of options.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "argo_bgc,~argo_core"
          items:
            type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          $ref: '#/components/schemas/argo_data_keys'
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argo'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/meta:
    get:
      tags:
      - argo
      summary: Argo metadata search and filter.
      operationId: findArgometa
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argoMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/vocabulary:
    get:
      tags:
      - argo
      summary: List all possible values for certain Argo query string parameters
      operationId: argoVocab
      parameters:
      - name: parameter
        in: query
        description: Argo query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - platform
          - source
          - data_keys
          - metadata
          - platform_type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/overview:
    get:
      tags:
      - argo
      summary: Summarizes some collection-level statistics about Argo data.
      operationId: argoOverview
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/dacs:
    get:
      tags:
      - argo
      summary: Summarizes some datacenter-level statistics about Argo data.
      operationId: argoDACs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/bgc:
    get:
      tags:
      - argo
      summary: Summarizes some float-level statistics for Argo BGC floats.
      operationId: argoBGC
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /summary:
    get:
      tags:
      - summary (experimental)
      summary: Fetch a document from the summary collection by ID.
      operationId: fetchSummary
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: SummaryExperimental
  /token:
    get:
      tags:
      - token
      summary: validate an API token
      operationId: validateToken
      parameters:
      - name: token
        in: query
        description: token to validate
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Token
components:
  schemas:
    arShapeSchema:
      required:
      - _id
      - date
      - date_formatted
      - geolocation
      - shapeId
      type: object
      properties:
        _id:
          type: string
        date:
          type: string
          format: date-time
        shapeId:
          type: integer
        geolocation:
          $ref: '#/components/schemas/geoJSONpolygon'
        date_formateed:
          type: string
          format: date
      example:
        date: 2000-01-23T04:56:07.000+00:00
        date_formateed: 2000-01-23
        shapeId: 0
        _id: _id
        geolocation:
          coordinates:
          - - 6.02745618307040320615897144307382404804229736328125
            - 6.02745618307040320615897144307382404804229736328125
          - - 6.02745618307040320615897144307382404804229736328125
            - 6.02745618307040320615897144307382404804229736328125
          type: type
    argone:
      required:
      - _id
      - geolocation
      - geolocation_forecast
      - metadata
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        geolocation_forecast:
          $ref: '#/components/schemas/geoJSONpoint'
        data:
          $ref: '#/components/schemas/data'
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        geolocation_forecast: null
        _id: _id
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
    argoneMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - levels
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        levels:
          type: array
          items:
            type: number
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        data_info:
        - ""
        - ""
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        levels:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
    tc:
      required:
      - _id
      - basin
      - class
      - geolocation
      - metadata
      - record_identifier
      - timestamp
      type: object
      properties:
        _id:
          type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
        record_identifier:
          type: string
        class:
          type: string
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        record_identifier: record_identifier
        class: class
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    tcMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - name
      - num
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        name:
          type: string
        num:
          type: number
      example:
        data_info:
        - ""
        - ""
        num: 0.80082819046101150206595775671303272247314453125
        data_type: data_type
        name: name
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    grid:
      required:
      - _id
      - basin
      - geolocation
      - metadata
      - timestamp
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/data'
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    gridMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - levels
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        levels:
          type: array
          items:
            type: number
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        data_info:
        - ""
        - ""
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        levels:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
    geoJSONpoint:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            maxItems: 2
            minItems: 2
            type: number
      example:
        coordinates:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
        type: type
    geoJSONpolygon:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            items:
              maxItems: 2
              minItems: 2
              type: number
      example:
        coordinates:
        - - 6.02745618307040320615897144307382404804229736328125
          - 6.02745618307040320615897144307382404804229736328125
        - - 6.02745618307040320615897144307382404804229736328125
          - 6.02745618307040320615897144307382404804229736328125
        type: type
    data:
      type: array
      items:
        type: array
        items:
          anyOf:
          - type: string
          - type: number
    data_info:
      type: array
      items:
        anyOf:
        - type: array
          items:
            type: string
        - type: array
          items:
            type: array
            items:
              anyOf:
              - type: string
              - type: number
    generic_source_info:
      required:
      - source
      type: object
      properties:
        source:
          type: array
          items:
            type: string
        url:
          type: string
        date_updated:
          type: string
          format: date-time
        doi:
          type: string
      example:
        date_updated: 2000-01-23T04:56:07.000+00:00
        source:
        - source
        - source
        url: url
        doi: doi
    cchdo:
      required:
      - _id
      - basin
      - cast
      - data_info
      - geolocation
      - metadata
      - source
      - station
      - timestamp
      type: object
      properties:
        _id:
          type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        data_warning:
          type: array
          items:
            type: string
            enum:
            - degenerate_levels
            - missing_basin
            - missing_location
            - missing_timestamp
        station:
          type: string
        cast:
          type: number
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        data_warning:
        - degenerate_levels
        - degenerate_levels
        cast: 6.02745618307040320615897144307382404804229736328125
        data_info:
        - ""
        - ""
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        station: station
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    cchdoMeta:
      required:
      - _id
      - cchdo_cruise_id
      - data_type
      - date_updated_argovis
      - expocode
      - woce_lines
      type: object
      properties:
        _id:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        data_type:
          type: string
        country:
          type: string
        data_center:
          type: string
        instrument:
          type: string
        pi_name:
          type: array
          items:
            type: string
        expocode:
          type: string
        cchdo_cruise_id:
          type: number
        woce_lines:
          type: array
          items:
            type: string
      example:
        country: country
        expocode: expocode
        woce_lines:
        - woce_lines
        - woce_lines
        pi_name:
        - pi_name
        - pi_name
        cchdo_cruise_id: 0.80082819046101150206595775671303272247314453125
        data_type: data_type
        data_center: data_center
        instrument: instrument
        _id: _id
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    argo:
      required:
      - _id
      - basin
      - cycle_number
      - data_info
      - date_updated_argovis
      - geolocation
      - metadata
      - source
      - timestamp
      type: object
      properties:
        _id:
          type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        data_warning:
          type: array
          items:
            type: string
            enum:
            - degenerate_levels
            - missing_basin
            - missing_location
            - missing_timestamp
        cycle_number:
          type: number
        geolocation_argoqc:
          type: number
        profile_direction:
          type: string
        timestamp_argoqc:
          type: number
        vertical_sampling_scheme:
          type: string
      example:
        metadata:
        - metadata
        - metadata
        geolocation_argoqc: 1.46581298050294517310021547018550336360931396484375
        data:
        - - ""
          - ""
        - - ""
          - ""
        basin: 0.80082819046101150206595775671303272247314453125
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        data_info:
        - ""
        - ""
        data_warning:
        - degenerate_levels
        - degenerate_levels
        vertical_sampling_scheme: vertical_sampling_scheme
        cycle_number: 6.02745618307040320615897144307382404804229736328125
        timestamp_argoqc: 5.962133916683182377482808078639209270477294921875
        _id: _id
        profile_direction: profile_direction
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    argoMeta:
      required:
      - _id
      - data_type
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        country:
          type: string
        data_center:
          type: string
        instrument:
          type: string
        pi_name:
          type: array
          items:
            type: string
        platform:
          type: string
        platform_type:
          type: string
        fleetmonitoring:
          type: string
        oceanops:
          type: string
        positioning_system:
          type: string
        wmo_inst_type:
          type: string
      example:
        country: country
        positioning_system: positioning_system
        platform_type: platform_type
        pi_name:
        - pi_name
        - pi_name
        wmo_inst_type: wmo_inst_type
        data_type: data_type
        data_center: data_center
        instrument: instrument
        _id: _id
        oceanops: oceanops
        fleetmonitoring: fleetmonitoring
        platform: platform
    data_adjacent:
      anyOf:
      - type: array
        items:
          type: string
      - type: object
        additionalProperties:
          type: string
    argo_data_keys:
      type: array
      items:
        pattern: "^((~)?((bbp470)|(bbp532)|(bbp700)|(bbp700_2)|(bisulfide)|(cdom)|(chla)|(cndc)|(cndx)|(cp660)|(down_irradiance380)|(down_irradiance412)|(down_irradiance442)|(down_irradiance443)|(down_irradiance490)|(down_irradiance555)|(down_irradiance670)|(downwelling_par)|(doxy)|(doxy2)|(doxy3)|(molar_doxy)|(nitrate)|(ph_in_situ_total)|(pressure)|(salinity)|(salinity_sfile)|(temperature)|(temperature_sfile)|(turbidity)|(up_radiance412)|(up_radiance443)|(up_radiance490)|(up_radiance555){1})((_std)|(_med){1})?(_argoqc)?|all|except-data-values)$"
        type: string
    errorResponse:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    inline_response_200:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_overview
        summary:
          $ref: '#/components/schemas/inline_response_200_summary'
      example:
        summary:
          datacenters:
          - datacenters
          - datacenters
          nCore: 0.80082819046101150206595775671303272247314453125
          nBGC: 6.02745618307040320615897144307382404804229736328125
          nDeep: 1.46581298050294517310021547018550336360931396484375
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_overview
    inline_response_200_1:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_dacs
        summary:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_1_summary'
      example:
        summary:
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_dacs
    inline_response_200_2:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_bgc
        summary:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_1_summary'
      example:
        summary:
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_bgc
    inline_response_200_summary:
      type: object
      properties:
        nCore:
          type: number
        nBGC:
          type: number
        nDeep:
          type: number
        mostrecent:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
        datacenters:
          type: array
          items:
            type: string
      example:
        datacenters:
        - datacenters
        - datacenters
        nCore: 0.80082819046101150206595775671303272247314453125
        nBGC: 6.02745618307040320615897144307382404804229736328125
        nDeep: 1.46581298050294517310021547018550336360931396484375
        mostrecent: 2010-01-01T00:00:00Z
    inline_response_200_1_summary:
      type: object
      properties:
        _id:
          type: string
        "n":
          type: number
        mostrecent:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      example:
        _id: _id
        "n": 0.80082819046101150206595775671303272247314453125
        mostrecent: 2010-01-01T00:00:00Z
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    notFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    serverError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
  parameters:
    arDate:
      name: date
      in: query
      description: three hour increments starting at 2004-01-01T00:00:00 and ending
        at 2017-04-02T03:00:00
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    arID:
      name: _id
      in: query
      description: ID of an atmospheric river object
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 1_262992
    tcName:
      name: name
      in: query
      description: name of tropical cyclone
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: LANE
    startDate:
      name: startDate
      in: query
      description: ISO 8601 UTC date-time formatted string indicating the beginning
        of the time period of interest.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    endDate:
      name: endDate
      in: query
      description: ISO 8601 UTC date-time formatted string indicating the end of the
        time period of interest.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    gridName:
      name: gridName
      in: query
      description: name of the gridded product to query.
      required: true
      style: form
      explode: true
      schema:
        type: string
        example: rgTempTotal
    presRange:
      name: presRange
      in: query
      description: Pressure range in dbar to filter for; levels outside this range
        will not be returned.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    forecastOrigin:
      name: forecastOrigin
      in: query
      description: "Longitude,latitude of forecast origin location."
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    forecastGeolocation:
      name: forecastGeolocation
      in: query
      description: "Longitude,latitude of forecast destination location."
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    profileSource:
      name: source
      in: query
      description: Experimental program source(s) to search for; document must match
        all sources to be returned. Accepts ~ negation to filter out documents. See
        /<data route>/vocabulary?parameter=source for list of options.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "argo_bgc,~argo_core"
        items:
          type: string
    woceline:
      name: woceline
      in: query
      description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
        for list of options.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: A10
    cchdo_cruise:
      name: cchdo_cruise
      in: query
      description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
        for list of options.
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 518
    compression:
      name: compression
      in: query
      description: Data minification strategy to apply.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - minimal
    genericID:
      name: id
      in: query
      description: Unique ID to search for.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 4902911_0
    platformID:
      name: platform
      in: query
      description: Unique platform ID to search for.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: "4902911"
    platform_type:
      name: platform_type
      in: query
      description: Make/model of platform
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: PALACE
    polygon:
      name: polygon
      in: query
      description: "array of [lon, lat] vertices describing a polygon bounding the\
        \ region of interest; final point must match initial point"
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
    multipolygon:
      name: multipolygon
      in: query
      description: array of polygon regions; region of interest is taken as the intersection
        of all listed polygons.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
    center:
      name: center
      in: query
      description: center to measure max radius from when defining circular region
        of interest; must be used in conjunction with query string parameter 'radius'.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    radius:
      name: radius
      in: query
      description: km from centerpoint when defining circular region of interest;
        must be used in conjunction with query string parameter 'center'.
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 50
    mostrecent:
      name: mostrecent
      in: query
      description: get back only the n records with the most recent values of timestamp.
      required: false
      style: form
      explode: true
      schema:
        type: number
    lat:
      name: lat
      in: query
      description: latitude (degrees) of Argo float location
      required: true
      style: form
      explode: true
      schema:
        maximum: 90
        minimum: -90
        type: number
        example: 5.25
    lon:
      name: lon
      in: query
      description: longitude (degrees) of Argo float location
      required: true
      style: form
      explode: true
      schema:
        maximum: 180
        minimum: -180
        type: number
        example: -20.33
    forcastDays:
      name: forcastDays
      in: query
      description: number of days over which to project Argo float drift
      required: true
      style: form
      explode: true
      schema:
        maximum: 1800
        minimum: 60
        type: number
        example: 60
        enum:
        - 60
        - 120
        - 140
        - 240
        - 360
        - 480
        - 720
        - 840
        - 960
        - 1080
        - 1200
        - 1320
        - 1440
        - 1560
        - 1680
        - 1800
    wmo:
      name: wmo
      in: query
      description: World Meteorological Organization identification number
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 1300915
    metadata:
      name: metadata
      in: query
      description: metadata pointer
      required: false
      style: form
      explode: true
      schema:
        type: string
